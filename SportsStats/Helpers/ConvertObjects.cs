using SportsStats.Models.ControllerObjects;
using SportsStats.Models.DTOObjects;
using SportsStats.Models.ServiceObjects;
using System;
using System.Linq;
using static SportsStats.Helpers.Enums;

namespace SportsStats.Helpers
{
    public static class ConvertObjects
    {
        public static StatType ConvertType(DTOStatType o)
        {
            return new StatType()
            {
                SportID = o.SportID,
                DefaultShow = o.DefaultShow,
                DisplayName = o.DisplayName,
                ID = o.StatTypeID,
                Name = o.Name,
                IsCalculated = o.IsCalculated,
                GridDisplayOrder = o.GridDisplayOrder,
                SelectionDisplayOrder = o.SelectionDisplayOrder,
                ValueType = (ValueTypes)o.ValueType,
                IsPositive = o.IsPositive,
                QuickButtonOrder = o.QuickButtonOrder,
                QuickButtonText = o.QuickButtonText,
                AutoGenerated = o.AutoGenerated,
                ShowGame = o.ShowGame,
                ShowTeam = o.ShowTeam,
                ShowPlayer = o.ShowPlayer
            };
        }
        public static StatTypeResult ConvertType(StatType o)
        {
            return new StatTypeResult()
            {
                Sport = (SportsList)o.SportID,
                StatTypeID = o.ID,
                DefaultShow = o.DefaultShow,
                Name = o.Name,
                DisplayName = o.DisplayName,
                ValueType = (int)o.ValueType,
                IsPositive = o.IsPositive,
                QuickButtonOrder = o.QuickButtonOrder,
                QuickButtonText = o.QuickButtonText,
                AutoGenerated = o.AutoGenerated,
                ShowGame = o.ShowGame,
                ShowTeam = o.ShowTeam,
                ShowPlayer = o.ShowPlayer
            };
        }
        public static DTOPlayer ConvertType(Player o)
        {
            return new DTOPlayer()
            {
                ID = o.ID,
                Name = o.Name,
                Number = o.Number
            };
        }
        public static Player ConvertType(TeamPlayerResult o)
        {
            return new Player()
            {
                ID = o.ID,
                Name = o.Name,
                Number = o.Number
            };
        }
        public static Player ConvertType(PlayersResult o)
        {
            return new Player()
            {
                ID = o.ID,
                Name = o.Name,
                Number = o.Number
            };
        }
        public static Player ConvertType(PlayerResult o)
        {
            return new Player()
            {
                ID = o.ID,
                Name = o.Name,
                Teams = o.Teams
                            .Select(t => new Team()
                            {
                                ID = t.ID,
                                PlayerNumber = t.Number
                            })
                            .ToList()
            };
        }
        public static DTOGame ConvertType(Game o)
        {
            return new DTOGame()
            {
                GameDate = o.GameDate,
                Team1ID = o.Team1ID,
                Team2ID = o.Team2ID,
                ID = o.ID,
				LeagueID = o.LeagueID
			};
        }

        public static Game ConvertType(DTOGame o)
        {
			return new Game()
			{
				GameDate = o.GameDate,
				Team1ID = o.Team1ID,
				Team2ID = o.Team2ID,
				ID = o.ID,
				SportID = o.SportID,
				LeagueID = o.LeagueID
            };
        }

        public static GameResultBase ConvertType2(Game o)
        {
            return new GameResultBase()
            {
                Team1Name = o.Team1Name,
                Team2Name = o.Team2Name,
                Team1Score = o.Team1Score,
                Team2Score = o.Team2Score
            };
        }
        public static Game ConvertType(GameResultBase o)
        {
            return new Game()
            {
                GameDate = Convert.ToDateTime(o.GameDate),
                Team1ID = o.Team1ID,
                Team2ID = o.Team2ID,
                ID = o.ID,
				LeagueID = o.LeagueID
            };
        }
        public static Team ConvertType(TeamsResult o)
        {
            return new Team()
            {
                ID = o.ID,
                Name = o.Name,
                LeagueID = o.LeagueID
            };
        }
        public static DTOTeam ConvertType(Team o)
        {
            return new DTOTeam()
            {
                ID = o.ID,
                Name = o.Name,
                LeagueID = o.LeagueID
            };
        }
        public static DTOStat ConvertType(PlayerGameStat o)
        {
            return new DTOStat()
            {
                GameID = o.GameID,
                PlayerID = o.PlayerID,
                StatTypeID = o.StatTypeID,
                Value = o.Value,
                TeamID = o.TeamID,
                GroupID = o.GroupID,
                States = o.States,
                Override = o.Override
            };
        }
        public static PlayerGameStat ConvertType(StatRequest o)
        {
            return new PlayerGameStat()
            {
				LeagueID = o.LeagueID,
                GameID = o.GameID,
                PlayerID = o.PlayerID,
                StatTypeID = o.StatTypeID,
                TeamID = o.TeamID,
                Value = o.Value,
                GroupID = o.GroupID,
            };
        }
        public static StatType ConvertType(DTOStatExtended o)
        {
            return new StatType()
            {
                DefaultShow = o.DefaultShow,
                DisplayName = o.DisplayName,
                ID = o.StatTypeID,
                IsCalculated = o.IsCalculated,
                Name = o.Name,
                GridDisplayOrder = o.GridDisplayOrder,
                ValueType = (ValueTypes)o.ValueType,
                SelectionDisplayOrder = o.SelectionDisplayOrder
            };
        }
        public static GameStat ConvertType2(DTOStatExtended o)
        {
            return new GameStat()
            {
                LeagueID = o.LeagueID,
                GameID = o.GameID,
                TeamID = o.TeamID,
                PlayerID = o.PlayerID,
                Value = o.Value,
                StatType = ConvertType(o),
                StatStates = o.States.Select(s => (StatStates)s).ToList()
            };
        }
        public static Stat ConvertType(GameStat o)
        {
            return new Stat()
            {
                Value = o.Value,
                StatType = o.StatType
            };
        }

        public static GameStat ConvertType2(Stat o)
        {
            return new GameStat()
            {
                Value = Convert.ToInt32(o.Value),
                StatType = o.StatType,
                TeamID = o.TeamID                
            };
        }

        public static StatResult ConvertType(Stat o)
        {
            return new StatResult()
            {
                Value = o.Value,
                Name = o.StatType.Name
            };
        }
        public static PlayerStatsResult ConvertType(PlayerStats o)
        {
            return new PlayerStatsResult()
            {
                TeamID = o.TeamID,
                LeagueID = o.LeagueID,
                Sport = (SportsList)o.SportID,
                PlayerID = o.PlayerID,
                PlayerName = o.PlayerName,
                PlayerNumber = o.PlayerNumber,
                PlayerStats = o.Stats
                    .OrderBy(s => s.StatType.GridDisplayOrder)
                    .Select(s => ConvertType(s))
                    .ToList()
            };
        }
        public static DTOUser ConvertType(User u)
        {
            return new DTOUser()
            {
                Password = u.Password,
                RoleID = (int)u.Role,
                UserName = u.UserName
            };
        }
        public static User ConvertType(DTOUser u)
        {
            return new User()
            {
                Role = (Roles)u.RoleID,
                UserName = u.UserName,
                Teams = u.Teams,
                Leagues = u.Leagues,
                Players = u.Players,
                Sports = u.Sports,
                AdminLeagueIDs = u.AdminLeagueIDs
            };
        }
        public static User ConvertType(UserResult u)
        {
            return new User()
            {
                UserName = u.UserName,
                Password = u.Password,
                RequestedLeagueID = u.RequestedLeagueID
            };
        }
        public static UserResult ConvertType2(User u)
        {
            if (u == null)
                return null;

            return new UserResult()
            {
                RoleID = (int)u.Role,
                UserName = u.UserName,
                Password = u.Password,
                HasOneTeam = u.HasOneTeam,
                Teams = u.Teams,
                Leagues = u.Leagues,
                Sports = u.Sports,
                AdminLeagueIDs = u.AdminLeagueIDs
            };
        }
        public static StatGroup ConvertType(DTOStatGroup o)
        {
            return new StatGroup()
            {
                GroupID = o.GroupID
            };
        }
        public static State ConvertType(DTOState o)
        {
            return new State()
            {
                DisplayOrder = o.DisplayOrder,
                ID = o.ID,
                Name = o.Name
            };
        }
        public static StatStateResult ConvertType(State o)
        {
            return new StatStateResult()
            {
                DisplayOrder = o.DisplayOrder,
                ID = o.ID,
                Name = o.Name
            };
        }
        public static State ConvertType(StatStateResult o)
        {
            return new State()
            {
                DisplayOrder = o.DisplayOrder,
                ID = o.ID,
                Name = o.Name
            };
        }
        public static DTOState ConvertType2(State o)
        {
            return new DTOState()
            {
                DisplayOrder = o.DisplayOrder,
                ID = o.ID,
                Name = o.Name
            };
        }
        public static PlayersResult ConvertType(PlayerBase o)
        {
            return new PlayersResult()
            {
                ID = o.ID,
                Number = o.Number,
                Name = o.Name
            };
        }
        public static BaseballGameStateResult ConvertType(BaseballGameState o)
        {
            return new BaseballGameStateResult()
            {
                GameID = o.GameID,
                Inning = o.Inning,
                NumberOfOuts = o.NumberOfOuts,
                PlayerOnFirst = o.PlayerOnFirst != null ? ConvertType(o.PlayerOnFirst) : null,
                PlayerOnSecond = o.PlayerOnSecond != null ? ConvertType(o.PlayerOnSecond) : null,
                PlayerOnThird = o.PlayerOnThird != null ? ConvertType(o.PlayerOnThird) : null,
                RunnersOut = o.RunnersOut?.Select(r => new PlayersResult() { Number = r.Number, ID = r.ID, Name = r.Name }).ToList(),
                RunnersScored = o.RunnersScored?.Select(r => new PlayersResult() { Number = r.Number, ID = r.ID, Name = r.Name }).ToList(),
                TopOfInning = o.TopOfInning,
                NextAtBat = o.NextAtBat,
                Team1Player = o.Team1Player != null ? ConvertType(o.Team1Player) : null,
                Team2Player = o.Team2Player != null ? ConvertType(o.Team2Player) : null,
                InningChanged = o.InningChanged
            };
        }
        public static BaseballGameState ConvertType(BaseballGameStateResult o)
        {
            return new BaseballGameState()
            {
                GameID = o.GameID,
                Inning = o.Inning,
                NumberOfOuts = o.NumberOfOuts,
                PlayerOnFirst = o.PlayerOnFirst != null ? ConvertType(o.PlayerOnFirst) : null,
                PlayerOnSecond = o.PlayerOnSecond != null ? ConvertType(o.PlayerOnSecond) : null,
                PlayerOnThird = o.PlayerOnThird != null ? ConvertType(o.PlayerOnThird) : null,
                RunnersOut = o.RunnersOut?.Select(r => new PlayerBase() { Number = r.Number, ID = r.ID, Name = r.Name }).ToList(),
                RunnersScored = o.RunnersScored?.Select(r => new PlayerBase() { Number = r.Number, ID = r.ID, Name = r.Name }).ToList(),
                Team1Player = o.Team1Player != null ? ConvertType(o.Team1Player) : null,
                Team2Player = o.Team2Player != null ? ConvertType(o.Team2Player) : null,
                TopOfInning = o.TopOfInning,
                NextAtBat = o.NextAtBat
            };
        }
        public static BaseballGameState ConvertType(DTOBaseballGameState o)
        {
            return new BaseballGameState()
            {
                GameID = o.GameID,
                Inning = o.Inning,
                NumberOfOuts = o.NumberOfOuts,
                PlayerOnFirst = o.PlayerOnFirst.HasValue ? new PlayerBase() { ID = o.PlayerOnFirst.Value } : null,
                PlayerOnSecond = o.PlayerOnSecond.HasValue ? new PlayerBase() { ID = o.PlayerOnSecond.Value } : null,
                PlayerOnThird = o.PlayerOnThird.HasValue ? new PlayerBase() { ID = o.PlayerOnThird.Value } : null,
                Team1Player = o.Team1PlayerID.HasValue ? new PlayerBase() { ID = o.Team1PlayerID.Value } : null,
                Team2Player = o.Team2PlayerID.HasValue ? new PlayerBase() { ID = o.Team2PlayerID.Value } : null,
                TopOfInning = o.TopOfInning
            };
        }
        public static DTOBaseballGameState ConvertType2(BaseballGameState o)
        {
            return new DTOBaseballGameState()
            {
                GameID = o.GameID,
                Inning = o.Inning,
                NumberOfOuts = o.NumberOfOuts,
                PlayerOnFirst = o.PlayerOnFirst?.ID,
                PlayerOnSecond = o.PlayerOnSecond?.ID,
                PlayerOnThird = o.PlayerOnThird?.ID,
                Team1PlayerID = o.Team1Player?.ID,
                Team2PlayerID = o.Team2Player?.ID,
                TopOfInning = o.TopOfInning
            };
        }
        public static NextBatterResult ConvertType(NextBatter o)
        {
            return new NextBatterResult()
            {
                PlayerID = o.PlayerID,
                TeamID = o.TeamID,
            };
        }
        public static GameLog ConvertType(DTOGameLog o)
        {
            return new GameLog()
            {
                TeamName = o.TeamName,
                PlayerName = o.PlayerName,
                DisplayName = o.DisplayName,
                Value = o.Value,
                Timestamp = o.Timestamp
            };
        }
        public static GameLogResult ConvertType(GameLog o)
        {
            return new GameLogResult()
            {
                TeamName = o.TeamName,
                PlayerName = o.PlayerName,
                DisplayName = o.DisplayName,
                Value = o.Value,
                Timestamp = o.Timestamp
            };
        }
    }
}